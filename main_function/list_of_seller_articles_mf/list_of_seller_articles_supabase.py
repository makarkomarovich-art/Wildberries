"""
Main: —Å–±–æ—Ä –±–∞–∑—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑ Content API (cards list) –∏ –∑–∞–ø–∏—Å—å –≤ Supabase.

–ü–æ–ª—è –¥–ª—è products: nmID, imtID, vendorCode, title, subjectName
–ü–æ–ª—è –¥–ª—è product_sizes: barcode, size (techSize)

–õ–æ–≥–∏–∫–∞:
1. –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ WB API (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
3. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Supabase
4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (excluded_nm_ids)
5. Upsert –≤ Supabase (products + product_sizes)
"""

from __future__ import annotations

from pathlib import Path
import importlib.util
from typing import Any, Dict, List


BASE_DIR = Path(__file__).resolve().parents[2]

# ========================================
# –ò–º–ø–æ—Ä—Ç—ã
# ========================================

# WB API Client
content_api_path = BASE_DIR / 'wb_api' / 'content_cards.py'
spec = importlib.util.spec_from_file_location('content_cards', str(content_api_path))
content_mod = importlib.util.module_from_spec(spec)
spec.loader.exec_module(content_mod)
WBContentCardsClient = content_mod.WBContentCardsClient

# API keys
api_keys_path = BASE_DIR / 'api_keys.py'
spec_keys = importlib.util.spec_from_file_location('api_keys', str(api_keys_path))
ak = importlib.util.module_from_spec(spec_keys)
spec_keys.loader.exec_module(ak)
WB_API_TOKEN = ak.WB_API_TOKEN
SUPABASE_URL = ak.SUPABASE_URL_LOCAL
SUPABASE_KEY = ak.SUPABASE_SERVICE_KEY_LOCAL

# –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
struct_path = BASE_DIR / 'excel_actions' / 'list_of_seller_articles_ea' / 'structure_validator.py'
spec_struct = importlib.util.spec_from_file_location('structure_validator', str(struct_path))
struct_mod = importlib.util.module_from_spec(spec_struct)
spec_struct.loader.exec_module(struct_mod)
check_and_validate_structure = struct_mod.check_and_validate_structure

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
norm_path = BASE_DIR / 'excel_actions' / 'list_of_seller_articles_ea' / 'normalize_articles.py'
spec_norm = importlib.util.spec_from_file_location('normalize_articles', str(norm_path))
norm_mod = importlib.util.module_from_spec(spec_norm)
spec_norm.loader.exec_module(norm_mod)
extract_data_for_supabase = norm_mod.extract_data_for_supabase

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è
excluded_path = BASE_DIR / 'main_function' / 'list_of_seller_articles_mf' / 'excluded_nm_ids.py'
spec_excl = importlib.util.spec_from_file_location('excluded_nm_ids', str(excluded_path))
excl_mod = importlib.util.module_from_spec(spec_excl)
spec_excl.loader.exec_module(excl_mod)
EXCLUDED_NM_IDS = excl_mod.EXCLUDED_NM_IDS

# Supabase
try:
    from supabase import create_client, Client
except ImportError:
    print("‚ùå –û–®–ò–ë–ö–ê: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install supabase")
    exit(1)


def upsert_to_supabase(
    supabase: Client,
    products_data: List[Dict[str, Any]],
    product_sizes_data: List[Dict[str, Any]]
) -> None:
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Supabase —Å upsert-–ª–æ–≥–∏–∫–æ–π.
    
    - products: upsert –ø–æ nm_id (UUID —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
    - product_sizes: upsert –ø–æ barcode
    """
    print(f"\nüì§ –ó–∞–ø–∏—Å—å –≤ Supabase...")
    
    # 1. Upsert products
    if products_data:
        print(f"   –¢–æ–≤–∞—Ä–æ–≤ –¥–ª—è upsert: {len(products_data)}")
        try:
            result = supabase.table('products').upsert(
                products_data,
                on_conflict='nm_id'
            ).execute()
            print(f"   ‚úÖ Products: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(result.data)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ products: {e}")
            raise
    
    # 2. –ü–æ–ª—É—á–∞–µ–º UUID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ nm_id (–¥–ª—è —Å–≤—è–∑–∏ —Å product_sizes)
    nm_id_to_uuid = {}
    if products_data:
        nm_ids = [p['nm_id'] for p in products_data]
        try:
            result = supabase.table('products').select('id, nm_id').in_('nm_id', nm_ids).execute()
            nm_id_to_uuid = {row['nm_id']: row['id'] for row in result.data}
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ UUID —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            raise
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º product_id –≤ product_sizes_data
    if product_sizes_data:
        print(f"   –†–∞–∑–º–µ—Ä–æ–≤/–±–∞—Ä–∫–æ–¥–æ–≤ –¥–ª—è upsert: {len(product_sizes_data)}")
        for size_item in product_sizes_data:
            nm_id = size_item.pop('nm_id')  # —É–±–∏—Ä–∞–µ–º nm_id, –¥–æ–±–∞–≤–ª—è–µ–º product_id
            product_uuid = nm_id_to_uuid.get(nm_id)
            if not product_uuid:
                print(f"   ‚ö†Ô∏è WARNING: –ù–µ –Ω–∞–π–¥–µ–Ω UUID –¥–ª—è nm_id={nm_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞—Ä–∫ –æ–¥ {size_item.get('barcode')}")
                continue
            size_item['product_id'] = product_uuid
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ product_id
        product_sizes_data = [s for s in product_sizes_data if 'product_id' in s]
        
        if product_sizes_data:
            try:
                result = supabase.table('product_sizes').upsert(
                    product_sizes_data,
                    on_conflict='barcode'
                ).execute()
                print(f"   ‚úÖ Product sizes: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(result.data)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ product_sizes: {e}")
                raise
    
    print("‚úÖ –ó–∞–ø–∏—Å—å –≤ Supabase –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def main() -> None:
    print("üöÄ –°—Ç–∞—Ä—Ç —Å–±–æ—Ä–∫–∏ –±–∞–∑—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (Content API ‚Üí Supabase)")
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    def _mask(v: str) -> str:
        if not v:
            return "<empty>"
        return (v[:12] + "..." + v[-12:]) if len(v) > 24 else "***"
    
    print(f"WB API endpoint: {WBContentCardsClient(WB_API_TOKEN).base_url}")
    print(f"WB API key (masked): {_mask(WB_API_TOKEN)}")
    print(f"Supabase URL: {SUPABASE_URL}")
    print(f"Supabase key (masked): {_mask(SUPABASE_KEY)}")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ WB API
    print("\nüì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ WB API...")
    client = WBContentCardsClient(WB_API_TOKEN)
    cards = list(client.iterate_all_cards(limit=100, with_photo=-1, locale="ru"))
    print(f"   –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
    
    if not cards:
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ cards, –∑–∞–≤–µ—Ä—à–∞–µ–º")
        return
    
    # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    if not check_and_validate_structure(cards):
        print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return
    
    # 3. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("\nüîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    products_data, product_sizes_data = extract_data_for_supabase(cards)
    print(f"   –¢–æ–≤–∞—Ä–æ–≤ (products): {len(products_data)}")
    print(f"   –†–∞–∑–º–µ—Ä–æ–≤/–±–∞—Ä–∫–æ–¥–æ–≤ (product_sizes): {len(product_sizes_data)}")
    
    # 4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    if EXCLUDED_NM_IDS:
        print(f"\nüö´ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (excluded_nm_ids)...")
        print(f"   –ò—Å–∫–ª—é—á–µ–Ω–∏–π: {len(EXCLUDED_NM_IDS)}")
        before_products = len(products_data)
        before_sizes = len(product_sizes_data)
        
        products_data = [p for p in products_data if p['nm_id'] not in EXCLUDED_NM_IDS]
        product_sizes_data = [s for s in product_sizes_data if s['nm_id'] not in EXCLUDED_NM_IDS]
        
        print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {before_products - len(products_data)}")
        print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–≤: {before_sizes - len(product_sizes_data)}")
    
    if not products_data:
        print("‚ö†Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏")
        return
    
    # 5. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    print("\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # 6. –ó–∞–ø–∏—Å—å –≤ Supabase
    try:
        upsert_to_supabase(supabase, products_data, product_sizes_data)
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Supabase: {e}")
        return
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ë–∞–∑–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Supabase")


if __name__ == "__main__":
    main()

