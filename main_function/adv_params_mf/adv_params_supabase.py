#!/usr/bin/env python3
"""
Main —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WB –≤ Supabase.

–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π (/adv/v1/promotion/count)
2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (/adv/v3/fullstats)
3. –í–∞–ª–∏–¥–∞—Ü–∏—è API –æ—Ç–≤–µ—Ç–æ–≤
4. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ñ–∏–ª—å—Ç—Ä views>50, –∞–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º, —Å–∫–ª–µ–π–∫–∞)
5. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
6. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ adv_campaign_daily_stats (UPSERT)
7. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –≤ adv_params
8. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
"""

import sys
from datetime import date, timedelta
from pathlib import Path

# Add project root to path
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

from wb_api.adv_params_api.promotion_count import (
    fetch_promotion_count,
    extract_campaign_ids,
    get_campaigns_stats
)
from wb_api.adv_params_api.fullstats import fetch_fullstats_batch

from excel_actions.adv_params_ea.structure_validator import (
    validate_promotion_count_response,
    validate_fullstats_response
)
from excel_actions.adv_params_ea.transform import (
    transform_fullstats_to_campaign_daily,
    get_transform_summary
)
from excel_actions.adv_params_ea.data_validator import (
    validate_campaign_daily_stats_batch,
    check_for_duplicates
)
from excel_actions.adv_params_ea.supabase_writer import (
    get_vendor_code_map,
    upsert_campaign_daily_stats,
    trigger_adv_params_aggregation,
    insert_adv_params_direct
)

from supabase import create_client, Client
import api_keys


def get_supabase_client() -> Client:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Supabase"""
    url = api_keys.SUPABASE_URL
    key = api_keys.SUPABASE_KEY
    
    if not url or not key:
        raise RuntimeError(
            "Supabase credentials not configured. "
            "Check SUPABASE_URL and SUPABASE_KEY in api_keys.py"
        )
    
    return create_client(url, key)


def main(
    begin_date: date | None = None,
    end_date: date | None = None,
    min_views_threshold: int = 1,  # –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã —Å views > 0 (–æ—Ç—Å–µ–∫–∞–µ–º —Å–∫–ª–µ–π–∫—É)
    use_rpc_aggregation: bool = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é RPC (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ timestamps)
):
    """
    Main entry point.
    
    Args:
        begin_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
        end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—á–µ—Ä–∞)
        min_views_threshold: –ú–∏–Ω–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
        use_rpc_aggregation: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ (–∏–ª–∏ Python)
    """
    print("=" * 70)
    print("üéØ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WB ‚Üí Supabase")
    print("=" * 70)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if end_date is None:
        end_date = date.today()  # —Å–µ–≥–æ–¥–Ω—è
    if begin_date is None:
        begin_date = date.today() - timedelta(days=2)  # –ø–æ–∑–∞–≤—á–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {begin_date} ‚Üí {end_date}")
    print(f"üëÅÔ∏è  –ú–∏–Ω–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {min_views_threshold}")
    print()
    
    # ========================================================================
    # –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π
    # ========================================================================
    print("üì° –®–∞–≥ 1/8: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")
    print("-" * 70)
    
    try:
        promotion_response = fetch_promotion_count()
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π: {e}")
        sys.exit(1)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ 1) –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ API –æ—Ç–≤–µ—Ç–∞
    print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ /adv/v1/promotion/count...")
    try:
        validate_promotion_count_response(promotion_response)
        print("‚úÖ 1) –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ API –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {e}")
        sys.exit(1)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ 2) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
    stats = get_campaigns_stats(promotion_response)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–º–ø–∞–Ω–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ 7, 9, 11 (–¥–ª—è fullstats)
    # –°—Ç–∞—Ç—É—Å—ã: 7 - –∑–∞–≤–µ—Ä—à–µ–Ω–∞, 9 - –∞–∫—Ç–∏–≤–Ω–∞, 11 - –Ω–∞ –ø–∞—É–∑–µ
    campaign_ids = extract_campaign_ids(promotion_response, filter_statuses=[7, 9, 11])
    
    print(f"\n‚úÖ 2) –°–∫–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {stats['by_status'].get(9, 0)}")
    print(f"   –°–∫–æ–ª—å–∫–æ –Ω–∞ –ø–∞—É–∑–µ: {stats['by_status'].get(11, 0)}")
    print(f"   –°–∫–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['by_status'].get(7, 0)}")
    print(f"   –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {stats['total']}")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ 3) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    print(f"\n‚úÖ 3) –°–∫–æ–ª—å–∫–æ –∫–∞–º–ø–∞–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ type:")
    for type_id, count in stats['by_type'].items():
        print(f"      type {type_id}: {count} –∫–∞–º–ø–∞–Ω–∏–π")
    
    if not campaign_ids:
        print("\n‚ö†Ô∏è  –ù–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    print(f"\nüÜî –ò–∑–≤–ª–µ—á–µ–Ω–æ campaign IDs: {len(campaign_ids)}")
    
    # ========================================================================
    # –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # ========================================================================
    print("\n\nüìä –®–∞–≥ 2/8: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("-" * 70)
    
    try:
        fullstats_response = fetch_fullstats_batch(
            campaign_ids,
            begin_date,
            end_date,
            batch_size=100,
            delay_between_batches=65,
            retry=True,
            max_retries=2
        )
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        sys.exit(1)
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {len(fullstats_response)}")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ 4) –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ API –æ—Ç–≤–µ—Ç–∞
    print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ /adv/v3/fullstats...")
    try:
        validate_fullstats_response(fullstats_response)
        print("‚úÖ 4) –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ API –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {e}")
        sys.exit(1)
    
    # ========================================================================
    # –®–ê–ì 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ vendor_code
    # ========================================================================
    print("\n\nüîå –®–∞–≥ 3/8: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase")
    print("-" * 70)
    
    try:
        supabase = get_supabase_client()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Supabase")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        sys.exit(1)
    
    try:
        vendor_code_map = get_vendor_code_map(supabase)
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è vendor_code: {e}")
        sys.exit(1)
    
    # ========================================================================
    # –®–ê–ì 4: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    # ========================================================================
    print("\n\nüîÑ –®–∞–≥ 4/8: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 70)
    
    try:
        transformed_stats = transform_fullstats_to_campaign_daily(
            fullstats_response,
            vendor_code_map,
            min_views_threshold=min_views_threshold
        )
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ 5) –°–≤–æ–¥–∫–∞ –ø–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    summary = get_transform_summary(transformed_stats)
    print(f"\n‚úÖ 5) –°–≤–æ–¥–∫–∞ –ø–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º:")
    print(f"      –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {summary['total_records']}")
    print(f"      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {summary['unique_campaigns']}")
    print(f"      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {summary['unique_articles']}")
    print(f"      –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {summary['date_range']}")
    print(f"      –°—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {summary['total_views']:,}")
    print(f"      –°—É–º–º–∞—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {summary['total_orders']:,}")
    
    if not transformed_stats:
        print("\n‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã —Å views < 50)")
        return
    
    # ========================================================================
    # –®–ê–ì 5: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ë–î (adv_campaign_daily_stats)
    # ========================================================================
    print("\n\nüíæ –®–∞–≥ 5/8: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ adv_campaign_daily_stats")
    print("-" * 70)
    
    try:
        inserted_count = upsert_campaign_daily_stats(transformed_stats, supabase)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ –ë–î: {inserted_count} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î: {e}")
        sys.exit(1)
    
    # ========================================================================
    # –®–ê–ì 6: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    # ========================================================================
    print("\n\nüîç –®–∞–≥ 6/8: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")
    print("-" * 70)
    
    db_count = 0  # –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        check_query = supabase.table('adv_campaign_daily_stats')\
            .select('*')\
            .gte('date', begin_date.isoformat())\
            .lte('date', end_date.isoformat())\
            .execute()
        
        db_records = check_query.data
        db_count = len(db_records)
        
        print(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ë–î:")
        print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤—Å—Ç–∞–≤–∫—É: {inserted_count} –∑–∞–ø–∏—Å–µ–π")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î: {db_count} –∑–∞–ø–∏—Å–µ–π")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if db_count == inserted_count:
            print(f"‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –≤—Å–µ {db_count} –∑–∞–ø–∏—Å–µ–π –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"‚ö†Ô∏è  –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {inserted_count}, –≤ –ë–î {db_count}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–≤—ã–±–æ—Ä–æ—á–Ω–æ, –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π)
        if db_count > 0:
            print(f"\n   –í—ã–±–æ—Ä–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
            sample_original = transformed_stats[:min(3, len(transformed_stats))]
            matches = 0
            
            for stats in sample_original:
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
                matching_record = next(
                    (r for r in db_records 
                     if r['advert_id'] == stats.advert_id 
                     and r['nm_id'] == stats.nm_id 
                     and r['date'] == stats.date.isoformat()),
                    None
                )
                
                if matching_record:
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    views_match = matching_record['views'] == stats.views
                    clicks_match = matching_record['clicks'] == stats.clicks
                    
                    if views_match and clicks_match:
                        matches += 1
                        print(f"   ‚úì advert_id={stats.advert_id}, nm_id={stats.nm_id}: —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                    else:
                        print(f"   ‚úó advert_id={stats.advert_id}, nm_id={stats.nm_id}: —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö")
            
            print(f"\n‚úÖ 6) –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã: {matches}/{len(sample_original)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û–®–ò–ë–ö–ê –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ë–î: {e}")
        print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    
    # ========================================================================
    # –®–ê–ì 7: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –≤ adv_params
    # ========================================================================
    print("\n\nüìä –®–∞–≥ 7/8: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ adv_params")
    print("-" * 70)
    
    try:
        if use_rpc_aggregation:
            try:
                aggregated_count = trigger_adv_params_aggregation(
                    supabase,
                    date_from=begin_date.isoformat(),
                    date_to=end_date.isoformat()
                )
                # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏
            except Exception:
                # –¢–∏—Ö–∏–π fallback –Ω–∞ Python –∞–≥—Ä–µ–≥–∞—Ü–∏—é (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏)
                aggregated_count = insert_adv_params_direct(
                    supabase,
                    date_from=begin_date.isoformat(),
                    date_to=end_date.isoformat()
                )
                # –°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏
        else:
            aggregated_count = insert_adv_params_direct(
                supabase,
                date_from=begin_date.isoformat(),
                date_to=end_date.isoformat()
            )
            # –°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {e}")
        print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é, –Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # ========================================================================
    # –®–ê–ì 8: –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # ========================================================================
    print("\n\nüîç –®–∞–≥ 8/8: –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 70)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        agg_query = supabase.table('adv_params')\
            .select('*')\
            .gte('date', begin_date.isoformat())\
            .lte('date', end_date.isoformat())\
            .execute()
        
        agg_records = agg_query.data
        agg_count = len(agg_records)
        
        if agg_count > 0:
            print(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   –í –ë–î (adv_params): {agg_count} –∑–∞–ø–∏—Å–µ–π")
            print(f"   –î–µ—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {db_count}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö
            from collections import defaultdict
            from decimal import Decimal
            
            expected_agg = defaultdict(lambda: {
                'views': 0, 'clicks': 0, 'sum': Decimal('0'),
                'orders': 0, 'orders_sum': Decimal('0')
            })
            
            for stats in transformed_stats:
                key = (stats.nm_id, stats.date.isoformat())
                expected_agg[key]['views'] += stats.views
                expected_agg[key]['clicks'] += stats.clicks
                expected_agg[key]['sum'] += stats.sum
                expected_agg[key]['orders'] += stats.orders
                expected_agg[key]['orders_sum'] += stats.orders_sum
            
            print(f"   –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤: {len(expected_agg)}")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã–±–æ—Ä–æ—á–Ω–æ (–ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏)
            matches = 0
            checked = 0
            
            for (nm_id, date_str), expected in list(expected_agg.items())[:3]:
                checked += 1
                # –ò—â–µ–º –≤ –ë–î
                actual = next(
                    (r for r in agg_records 
                     if r['nm_id'] == nm_id and r['date'] == date_str),
                    None
                )
                
                if actual:
                    views_match = actual['views'] == expected['views']
                    clicks_match = actual['clicks'] == expected['clicks']
                    orders_match = actual['orders'] == expected['orders']
                    
                    if views_match and clicks_match and orders_match:
                        matches += 1
                        print(f"   ‚úì nm_id={nm_id}, date={date_str}: —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                    else:
                        print(f"   ‚úó nm_id={nm_id}, date={date_str}: —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ")
                        print(f"      views: –æ–∂–∏–¥–∞–ª–∏ {expected['views']}, –≤ –ë–î {actual['views']}")
                else:
                    print(f"   ‚úó nm_id={nm_id}, date={date_str}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            
            print(f"\n‚úÖ 7) –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã:")
            print(f"      adv_campaign_daily_stats: {db_count} –∑–∞–ø–∏—Å–µ–π")
            print(f"      adv_params: {agg_count} –∑–∞–ø–∏—Å–µ–π")
            print(f"      –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤: {matches}/{checked} —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        else:
            print("‚ö†Ô∏è  –í adv_params –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            print(f"‚úÖ 7) –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã: {db_count} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û–®–ò–ë–ö–ê –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # ========================================================================
    # –ó–ê–í–ï–†–®–ï–ù–ò–ï
    # ========================================================================
    print("\n" + "=" * 70)
    print("‚úÖ –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
    print("=" * 70)


if __name__ == "__main__":
    import argparse
    from datetime import datetime
    
    parser = argparse.ArgumentParser(description="–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WB –≤ Supabase")
    parser.add_argument("--begin", type=str, help="–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)")
    parser.add_argument("--end", type=str, help="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)")
    parser.add_argument("--min-views", type=int, default=1, help="–ú–∏–Ω–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)")
    parser.add_argument("--no-rpc", action="store_true", help="–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RPC –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
    
    args = parser.parse_args()
    
    begin = datetime.strptime(args.begin, "%Y-%m-%d").date() if args.begin else None
    end = datetime.strptime(args.end, "%Y-%m-%d").date() if args.end else None
    
    main(
        begin_date=begin,
        end_date=end,
        min_views_threshold=args.min_views,
        use_rpc_aggregation=not args.no_rpc
    )

