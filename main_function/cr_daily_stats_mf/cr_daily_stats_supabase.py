#!/usr/bin/env python3
"""
Main —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CR Daily Stats –∏–∑ WB API –≤ Supabase.

–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
1. –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
3. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (—Å–µ–≥–æ–¥–Ω—è + –≤—á–µ—Ä–∞)
4. –û–±–æ–≥–∞—â–µ–Ω–∏–µ product_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products
5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –±–µ–∑ product_id
6. Upsert –≤ Supabase
"""

import sys
from pathlib import Path

# Add project root to path
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

from wb_api.cr_daily_stats.cr_daily_stats import fetch_cr_daily_stats
from excel_actions.cr_daily_stats_ea.structure_validator import validate_cr_daily_stats_structure
from excel_actions.cr_daily_stats_ea.transform import extract_cr_stats_for_supabase
from excel_actions.cr_daily_stats_ea.supabase_writer import (
    enrich_with_product_ids,
    upsert_records
)
from excel_actions.cr_daily_stats_ea.data_validator import validate_inserted_data

from supabase import create_client, Client
import api_keys


def get_supabase_client() -> Client:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Supabase"""
    url = api_keys.SUPABASE_URL
    key = api_keys.SUPABASE_KEY
    
    if not url or not key:
        raise RuntimeError(
            "Supabase credentials not configured. "
            "Check SUPABASE_URL and SUPABASE_KEY in api_keys.py"
        )
    
    return create_client(url, key)


def main():
    """Main entry point"""
    print("=" * 60)
    print("CR Daily Stats ‚Üí Supabase")
    print("=" * 60)
    
    # 1. –ó–∞–ø—Ä–æ—Å API
    print("\nüì° –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ API")
    api_response = fetch_cr_daily_stats()
    cards_count = len(api_response.get('data', {}).get('cards', []))
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {cards_count}")
    
    if cards_count == 0:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è
    print("\nüîç –®–∞–≥ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    try:
        validate_cr_daily_stats_structure(api_response)
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    # 3. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("\nüîÑ –®–∞–≥ 3: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    records_today, records_yesterday = extract_cr_stats_for_supabase(api_response)
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(records_today)}")
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—á–µ—Ä–∞: {len(records_yesterday)}")
    
    # 4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    print("\nüîå –®–∞–≥ 4: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase")
    supabase = get_supabase_client()
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫: {api_keys.SUPABASE_URL}")
    
    # 5. –û–±–æ–≥–∞—â–µ–Ω–∏–µ product_id
    print("\nüîÑ –®–∞–≥ 5: –û–±–æ–≥–∞—â–µ–Ω–∏–µ product_id")
    all_records = records_today + records_yesterday
    enriched_records = enrich_with_product_ids(all_records, supabase)
    
    if not enriched_records:
        print("‚ö†Ô∏è  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î (–≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ products)")
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ today –∏ yesterday
    enriched_today = [r for r in enriched_records if r in records_today]
    enriched_yesterday = [r for r in enriched_records if r in records_yesterday]
    
    # 6. Upsert –≤ –ë–î
    print("\nüíæ –®–∞–≥ 6: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Supabase")
    
    # Upsert –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—Å stocks)
    count_today = upsert_records(enriched_today, supabase, "—Å–µ–≥–æ–¥–Ω—è")
    
    # Upsert –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—á–µ—Ä–∞ (–±–µ–∑ stocks)
    count_yesterday = upsert_records(enriched_yesterday, supabase, "–≤—á–µ—Ä–∞")
    
    # 7. –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\nüîç –®–∞–≥ 7: –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    from datetime import datetime, timedelta
    try:
        from zoneinfo import ZoneInfo
    except ImportError:
        from backports.zoneinfo import ZoneInfo
    
    tz = ZoneInfo("Europe/Moscow")
    today_str = str(datetime.now(tz).date())
    yesterday_str = str((datetime.now(tz).date() - timedelta(days=1)))
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    validate_inserted_data(enriched_today, today_str, supabase, "—Å–µ–≥–æ–¥–Ω—è")
    validate_inserted_data(enriched_yesterday, yesterday_str, supabase, "–≤—á–µ—Ä–∞")
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üéâ –ì–û–¢–û–í–û!")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {len(set(r['nm_id'] for r in enriched_records))}")
    print(f"üìÖ –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {count_today}")
    print(f"üìÖ –ó–∞–ø–∏—Å–µ–π –∑–∞ –≤—á–µ—Ä–∞: {count_yesterday}")
    print(f"üíæ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {count_today + count_yesterday}")
    print("=" * 60)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

