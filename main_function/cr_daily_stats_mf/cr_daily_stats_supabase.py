#!/usr/bin/env python3
"""
Main —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CR Daily Stats –∏–∑ WB API –≤ Supabase.

–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
1. –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
3. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (—Å–µ–≥–æ–¥–Ω—è + –≤—á–µ—Ä–∞)
4. –û–±–æ–≥–∞—â–µ–Ω–∏–µ product_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products
5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –±–µ–∑ product_id
6. Upsert –≤ Supabase
"""

import sys
from pathlib import Path

# Add project root to path
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

from wb_api.cr_daily_stats.cr_daily_stats import fetch_cr_daily_stats
from excel_actions.cr_daily_stats_ea.structure_validator import validate_cr_daily_stats_structure
from excel_actions.cr_daily_stats_ea.transform import extract_cr_stats_for_supabase

from supabase import create_client, Client
import api_keys


def get_supabase_client() -> Client:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Supabase"""
    url = api_keys.SUPABASE_URL
    key = api_keys.SUPABASE_KEY
    
    if not url or not key:
        raise RuntimeError(
            "Supabase credentials not configured. "
            "Check SUPABASE_URL and SUPABASE_KEY in api_keys.py"
        )
    
    return create_client(url, key)


def enrich_with_product_ids(
    records: list[dict],
    supabase: Client
) -> list[dict]:
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ product_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products.
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω product_id.
    
    Args:
        records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
        supabase: –ö–ª–∏–µ–Ω—Ç Supabase
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º product_id (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π)
    """
    if not records:
        return []
    
    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ product_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ products –∏–∑ –ë–î
    response = supabase.table('products').select('nm_id, id').execute()
    products_map = {p['nm_id']: p['id'] for p in response.data}
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ products: {len(products_map)}")
    
    # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    enriched_records = []
    skipped_count = 0
    
    for record in records:
        nm_id = record['nm_id']
        product_id = products_map.get(nm_id)
        
        if not product_id:
            print(f"‚ö†Ô∏è  WARNING: nm_id={nm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ products, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            skipped_count += 1
            continue
        
        record['product_id'] = product_id
        enriched_records.append(record)
    
    print(f"‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(enriched_records)}")
    if skipped_count > 0:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π (–Ω–µ—Ç –≤ products): {skipped_count}")
    
    return enriched_records


def upsert_records(
    records: list[dict],
    supabase: Client,
    label: str = ""
) -> int:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç upsert –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É cr_daily_stats.
    
    Args:
        records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è upsert
        supabase: –ö–ª–∏–µ–Ω—Ç Supabase
        label: –ú–µ—Ç–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å–µ–≥–æ–¥–Ω—è" –∏–ª–∏ "–≤—á–µ—Ä–∞")
    
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    """
    if not records:
        print(f"‚ö†Ô∏è  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è upsert ({label})")
        return 0
    
    print(f"üîÑ Upsert –≤ Supabase ({label})...")
    
    try:
        response = supabase.table('cr_daily_stats').upsert(
            records,
            on_conflict='nm_id,date_of_period'
        ).execute()
        
        count = len(response.data) if response.data else len(records)
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π ({label}): {count}")
        return count
    
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ upsert ({label}): {e}")
        raise


def main():
    """Main entry point"""
    print("=" * 60)
    print("CR Daily Stats ‚Üí Supabase")
    print("=" * 60)
    
    # 1. –ó–∞–ø—Ä–æ—Å API
    print("\nüì° –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ API")
    api_response = fetch_cr_daily_stats()
    cards_count = len(api_response.get('data', {}).get('cards', []))
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {cards_count}")
    
    if cards_count == 0:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è
    print("\nüîç –®–∞–≥ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    try:
        validate_cr_daily_stats_structure(api_response)
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    # 3. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("\nüîÑ –®–∞–≥ 3: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    records_today, records_yesterday = extract_cr_stats_for_supabase(api_response)
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(records_today)}")
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—á–µ—Ä–∞: {len(records_yesterday)}")
    
    # 4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    print("\nüîå –®–∞–≥ 4: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase")
    supabase = get_supabase_client()
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫: {api_keys.SUPABASE_URL}")
    
    # 5. –û–±–æ–≥–∞—â–µ–Ω–∏–µ product_id
    print("\nüîÑ –®–∞–≥ 5: –û–±–æ–≥–∞—â–µ–Ω–∏–µ product_id")
    all_records = records_today + records_yesterday
    enriched_records = enrich_with_product_ids(all_records, supabase)
    
    if not enriched_records:
        print("‚ö†Ô∏è  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î (–≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ products)")
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ today –∏ yesterday
    enriched_today = [r for r in enriched_records if r in records_today]
    enriched_yesterday = [r for r in enriched_records if r in records_yesterday]
    
    # 6. Upsert –≤ –ë–î
    print("\nüíæ –®–∞–≥ 6: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Supabase")
    
    # Upsert –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—Å stocks)
    count_today = upsert_records(enriched_today, supabase, "—Å–µ–≥–æ–¥–Ω—è")
    
    # Upsert –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—á–µ—Ä–∞ (–±–µ–∑ stocks)
    count_yesterday = upsert_records(enriched_yesterday, supabase, "–≤—á–µ—Ä–∞")
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üéâ –ì–û–¢–û–í–û!")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {len(set(r['nm_id'] for r in enriched_records))}")
    print(f"üìÖ –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {count_today}")
    print(f"üìÖ –ó–∞–ø–∏—Å–µ–π –∑–∞ –≤—á–µ—Ä–∞: {count_yesterday}")
    print(f"üíæ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {count_today + count_yesterday}")
    print("=" * 60)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

