#!/usr/bin/env python3
"""
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Supabase.

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ó–∞–≥—Ä—É–∑–∫—É vendor_code –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products
- Upsert –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É adv_campaign_daily_stats
- –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–ª—è adv_params
"""

from __future__ import annotations

from typing import Dict, List
from supabase import Client

from .transform import CampaignDailyStats


def get_vendor_code_map(supabase: Client) -> Dict[int, str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ nm_id -> vendor_code –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products.
    
    Args:
        supabase: –ö–ª–∏–µ–Ω—Ç Supabase
    
    Returns:
        Dict: {nm_id: vendor_code}
    """
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ vendor_code –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products...")
    
    response = supabase.table('products').select('nm_id, vendor_code').execute()
    vendor_map = {p['nm_id']: p['vendor_code'] for p in response.data}
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ products: {len(vendor_map)}")
    
    return vendor_map


def upsert_campaign_daily_stats(
    stats_list: List[CampaignDailyStats],
    supabase: Client
) -> int:
    """
    Upsert –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É adv_campaign_daily_stats.
    
    Args:
        stats_list: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ CampaignDailyStats
        supabase: –ö–ª–∏–µ–Ω—Ç Supabase
    
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    
    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    """
    if not stats_list:
        print("‚ö†Ô∏è  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è upsert")
        return 0
    
    print(f"üîÑ Upsert –≤ adv_campaign_daily_stats...")
    print(f"   –ó–∞–ø–∏—Å–µ–π: {len(stats_list)}")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict –¥–ª—è Supabase
    records = [stats.to_dict() for stats in stats_list]
    
    try:
        response = supabase.table('adv_campaign_daily_stats').upsert(
            records,
            on_conflict='advert_id,nm_id,date'
        ).execute()
        
        count = len(response.data) if response.data else len(records)
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ adv_campaign_daily_stats: {count}")
        
        return count
    
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ upsert –≤ adv_campaign_daily_stats: {e}")
        raise


def trigger_adv_params_aggregation(
    supabase: Client,
    *,
    date_from: str | None = None,
    date_to: str | None = None
) -> int:
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É adv_params.
    
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    –∏–∑ adv_campaign_daily_stats.
    
    Args:
        supabase: –ö–ª–∏–µ–Ω—Ç Supabase
        date_from: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD) –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç
        date_to: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD) –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç
    
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    """
    print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–ª—è adv_params...")
    
    # –í—ã–∑—ã–≤–∞–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    # –§—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –¥–µ–ª–∞–µ—Ç UPSERT —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º created_at
    try:
        if date_from and date_to:
            print(f"   –ü–µ—Ä–∏–æ–¥: {date_from} ‚Üí {date_to}")
        response = supabase.rpc(
            'aggregate_adv_params',
            {
                'p_date_from': date_from,
                'p_date_to': date_to
            }
        ).execute()
        
        # –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç INTEGER (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π)
        count = response.data if isinstance(response.data, int) else (response.data[0] if response.data else 0)
        print(f"‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ adv_params: {count}")
        
        return count
    
    except Exception as e:
        # –¢–∏—Ö–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è fallback –Ω–∞ Python –∞–≥—Ä–µ–≥–∞—Ü–∏—é
        raise


def insert_adv_params_direct(
    supabase: Client,
    date_from: str | None = None,
    date_to: str | None = None
) -> int:
    """
    –ü—Ä—è–º–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ adv_params (–±–µ–∑ RPC).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
    
    Args:
        supabase: –ö–ª–∏–µ–Ω—Ç Supabase
        date_from: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
        date_to: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
    
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    """
    print("üîÑ –ü—Ä—è–º–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è adv_params...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    query = supabase.table('adv_campaign_daily_stats').select('*')
    
    if date_from:
        query = query.gte('date', date_from)
    if date_to:
        query = query.lte('date', date_to)
    
    response = query.execute()
    detailed_stats = response.data
    
    if not detailed_stats:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        return 0
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏
    from collections import defaultdict
    from decimal import Decimal
    
    aggregated = defaultdict(lambda: {
        'views': 0,
        'clicks': 0,
        'sum': Decimal('0'),
        'orders': 0,
        'orders_sum': Decimal('0')
    })
    
    for row in detailed_stats:
        key = (row['nm_id'], row['vendor_code'], row['date'])
        agg = aggregated[key]
        
        agg['views'] += row['views']
        agg['clicks'] += row['clicks']
        agg['sum'] += Decimal(str(row['sum']))
        agg['orders'] += row['orders']
        agg['orders_sum'] += Decimal(str(row['orders_sum']))
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ë–î
    records = []
    for (nm_id, vendor_code, date), agg in aggregated.items():
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        cpc = (agg['sum'] / agg['clicks']).quantize(Decimal('0.01')) if agg['clicks'] > 0 else None
        cpm = ((agg['sum'] / agg['views']) * 1000).quantize(Decimal('0.01')) if agg['views'] > 0 else None
        ctr = ((Decimal(agg['clicks']) / agg['views']) * 100).quantize(Decimal('0.01')) if agg['views'] > 0 else None
        
        records.append({
            'nm_id': nm_id,
            'vendor_code': vendor_code,
            'date': date,
            'views': agg['views'],
            'clicks': agg['clicks'],
            'sum': float(agg['sum']),
            'cpc': float(cpc) if cpc else None,
            'cpm': float(cpm) if cpm else None,
            'ctr': float(ctr) if ctr else None,
            'orders': agg['orders'],
            'orders_sum': float(agg['orders_sum'])
        })
    
    # –≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    # –û–±—ã—á–Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
    print("‚ö†Ô∏è  Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python –∞–≥—Ä–µ–≥–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ RPC")
    
    # –ü—Ä–æ—Å—Ç–æ–π UPSERT –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è created_at
    # (RPC —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ)
    if records:
        response = supabase.table('adv_params').upsert(
            records,
            on_conflict='nm_id,date'
        ).execute()
        
        count = len(response.data) if response.data else len(records)
        print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ adv_params (fallback): {count}")
        return count
    
    return 0

