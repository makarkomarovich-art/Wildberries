"""
–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö warehouse_remains –ø–æ barcode.
"""

from typing import Any, Dict, List


def aggregate_warehouse_remains(data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """
    –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ warehouse_remains –ø–æ barcode.
    
    Args:
        data: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ warehouse_remains API
        
    Returns:
        List[Dict]: –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É barcode
    """
    print("üìä –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ warehouse_remains –ø–æ barcode...")
    
    aggregated = []
    
    for item in data:
        barcode = item.get('barcode')
        if not barcode:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ barcode: {item}")
            continue
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        aggregated_item = {
            'barcode': barcode,
            'vendorCode': item.get('vendorCode', ''),
            'nmId': item.get('nmId', 0),
            'volume': item.get('volume', 0),
            'in_way_to_recipients': 0,  # –í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            'in_way_returns_to_warehouse': 0,  # –í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥ WB
            'warehouses': {}  # –°–ª–æ–≤–∞—Ä—å —Å–∫–ª–∞–¥–æ–≤: {–Ω–∞–∑–≤–∞–Ω–∏–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º warehouses
        warehouses = item.get('warehouses', [])
        for warehouse in warehouses:
            if not isinstance(warehouse, dict):
                continue
                
            warehouse_name = warehouse.get('warehouseName', '')
            quantity = warehouse.get('quantity', 0)
            
            # –ü–µ—Ä–≤—ã–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            if warehouse_name == "–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π":
                aggregated_item['in_way_to_recipients'] = quantity
            elif warehouse_name == "–í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥ WB":
                aggregated_item['in_way_returns_to_warehouse'] = quantity
            elif warehouse_name == "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö":
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç
                continue
            else:
                # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
                aggregated_item['warehouses'][warehouse_name] = quantity
        
        aggregated.append(aggregated_item)
    
    print(f"‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {len(aggregated)} barcode")
    return aggregated


def print_aggregation_sample(aggregated_data: List[Dict[str, Any]], count: int = 3) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        aggregated_data: –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
    """
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ {count}):")
    for i, item in enumerate(aggregated_data[:count]):
        print(f"\n{i+1}. Barcode: {item['barcode']}")
        print(f"   vendorCode: {item['vendorCode']}")
        print(f"   nmId: {item['nmId']}")
        print(f"   volume: {item['volume']}")
        print(f"   –í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {item['in_way_to_recipients']}")
        print(f"   –í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥ WB: {item['in_way_returns_to_warehouse']}")
        print(f"   –°–∫–ª–∞–¥—ã: {dict(list(item['warehouses'].items())[:3])}{'...' if len(item['warehouses']) > 3 else ''}")


def get_warehouse_statistics(aggregated_data: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∫–ª–∞–¥–∞–º.
    
    Args:
        aggregated_data: –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–ª–∞–¥–∞–º
    """
    all_warehouses = set()
    total_barcodes = len(aggregated_data)
    
    for item in aggregated_data:
        all_warehouses.update(item['warehouses'].keys())
    
    warehouse_stats = {}
    for warehouse in all_warehouses:
        count = sum(1 for item in aggregated_data if warehouse in item['warehouses'])
        warehouse_stats[warehouse] = {
            'count': count,
            'percentage': round(count / total_barcodes * 100, 1) if total_barcodes > 0 else 0
        }
    
    return {
        'total_barcodes': total_barcodes,
        'total_warehouses': len(all_warehouses),
        'warehouse_stats': warehouse_stats
    }


def get_warehouse_quantity_statistics(aggregated_data: List[Dict[str, Any]]) -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö.
    
    Args:
        aggregated_data: –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
    Returns:
        Dict: –°–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–∫–ª–∞–¥–∞: –æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Å—Ç–∞—Ç–∫–æ–≤}
    """
    warehouse_quantities = {}
    
    for item in aggregated_data:
        for warehouse_name, quantity in item['warehouses'].items():
            if warehouse_name not in warehouse_quantities:
                warehouse_quantities[warehouse_name] = 0
            warehouse_quantities[warehouse_name] += quantity
    
    return warehouse_quantities


def print_warehouse_statistics(aggregated_data: List[Dict[str, Any]]) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∫–ª–∞–¥–∞–º.
    
    Args:
        aggregated_data: –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    stats = get_warehouse_statistics(aggregated_data)
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ö–õ–ê–î–ê–ú:")
    print(f"–í—Å–µ–≥–æ barcode: {stats['total_barcodes']}")
    print(f"–í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {stats['total_warehouses']}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–ª–∞–¥—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É barcode
    sorted_warehouses = sorted(
        stats['warehouse_stats'].items(),
        key=lambda x: x[1]['count'],
        reverse=True
    )
    
    print(f"\n–¢–æ–ø-10 —Å–∫–ª–∞–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É barcode:")
    for i, (warehouse, stat) in enumerate(sorted_warehouses[:10]):
        print(f"{i+1:2d}. {warehouse}: {stat['count']} barcode ({stat['percentage']}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
    warehouse_quantities = get_warehouse_quantity_statistics(aggregated_data)
    total_all_quantities = sum(warehouse_quantities.values())
    sorted_by_quantity = sorted(
        warehouse_quantities.items(),
        key=lambda x: x[1],
        reverse=True
    )
    
    print(f"\n–¢–æ–ø-10 —Å–∫–ª–∞–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Å—Ç–∞—Ç–∫–æ–≤:")
    for i, (warehouse, total_quantity) in enumerate(sorted_by_quantity[:10]):
        percentage = (total_quantity / total_all_quantities * 100) if total_all_quantities > 0 else 0
        print(f"{i+1:2d}. {warehouse}: {total_quantity} –µ–¥–∏–Ω–∏—Ü ({percentage:.1f}%)")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
    print(f"\nüìä –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û –û–°–¢–ê–¢–ö–ê–ú:")
    
    # 1. –í—Å–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö
    total_warehouse_stocks = total_all_quantities
    print(f"1. –í—Å–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö: {total_warehouse_stocks:,} –µ–¥–∏–Ω–∏—Ü")
    
    # 2. –í—Å–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—É—Ç–∏ –∫ –∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    total_in_way_to = sum(item['in_way_to_recipients'] for item in aggregated_data)
    total_in_way_from = sum(item['in_way_returns_to_warehouse'] for item in aggregated_data)
    total_with_in_way = total_warehouse_stocks + total_in_way_to + total_in_way_from
    print(f"2. –í—Å–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—É—Ç–∏ –∫ –∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {total_with_in_way:,} –µ–¥–∏–Ω–∏—Ü")
    
    # 3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏
    if total_with_in_way > 0:
        in_way_to_percentage = (total_in_way_to / total_with_in_way) * 100
        print(f"3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É: {total_in_way_to:,} –µ–¥–∏–Ω–∏—Ü ({in_way_to_percentage:.1f}%)")
    else:
        print(f"3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É: {total_in_way_to:,} –µ–¥–∏–Ω–∏—Ü (0.0%)")
    
    # 4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—É—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏
    if total_with_in_way > 0:
        in_way_from_percentage = (total_in_way_from / total_with_in_way) * 100
        print(f"4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—É—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {total_in_way_from:,} –µ–¥–∏–Ω–∏—Ü ({in_way_from_percentage:.1f}%)")
    else:
        print(f"4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—É—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {total_in_way_from:,} –µ–¥–∏–Ω–∏—Ü (0.0%)")
