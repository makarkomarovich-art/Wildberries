"""
–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á–µ—Ç–∞ warehouse_remains —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º schemas.
"""

import json
import sys
import importlib.util
from pathlib import Path
from typing import Any, Dict, List, Tuple

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç schema_utils (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ excel_actions/utils/schemas)
schemas_path = Path(__file__).parent.parent / "utils" / "schemas"
schema_utils_path = schemas_path / "schema_utils.py"

if schema_utils_path.exists():
    spec = importlib.util.spec_from_file_location("schema_utils", str(schema_utils_path))
    schema_utils = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(schema_utils)
    load_json = schema_utils.load_json
    validate_flexible_type = schema_utils.validate_flexible_type
else:
    print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: schema_utils.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
    def load_json(file_path):
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def validate_flexible_type(value, expected_type, field_name="field"):
        return True


def validate_basic_structure(item: Dict[str, Any], item_index: int = 0) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞.
    
    Args:
        item: –≠–ª–µ–º–µ–Ω—Ç –∏–∑ warehouse_remains
        item_index: –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        
    Returns:
        tuple[bool, str]: (True –µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö)
    """
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É –∏–∑ utils/schemas
    schema_path = Path(__file__).parent.parent / "utils" / "schemas" / "warehouse_remains.schema.json"
    schema = load_json(str(schema_path))
    item_structure = schema["item_structure"]
    critical_fields = schema["critical_fields"]
    optional_fields = schema["optional_fields"]
    
    errors = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
    for field in critical_fields:
        if field not in item:
            errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {item_index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ '{field}'")
            continue
            
        value = item[field]
        expected_type = item_structure[field]
        
        if not validate_flexible_type(value, expected_type):
            actual_type = type(value).__name__ if value is not None else 'null'
            errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {item_index}: –ø–æ–ª–µ '{field}' –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø. –û–∂–∏–¥–∞–µ—Ç—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {actual_type}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
    for field in optional_fields:
        if field not in item:
            warnings.append(f"–≠–ª–µ–º–µ–Ω—Ç {item_index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
        else:
            value = item[field]
            expected_type = item_structure[field]
            
            if not validate_flexible_type(value, expected_type):
                actual_type = type(value).__name__ if value is not None else 'null'
                warnings.append(f"–≠–ª–µ–º–µ–Ω—Ç {item_index}: –ø–æ–ª–µ '{field}' –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø. –û–∂–∏–¥–∞–µ—Ç—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {actual_type}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
    schema_fields = set(item_structure.keys())
    actual_fields = set(item.keys())
    extra_fields = actual_fields - schema_fields
    
    if extra_fields:
        warnings.append(f"–≠–ª–µ–º–µ–Ω—Ç {item_index}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(sorted(extra_fields))}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_messages = []
    if errors:
        result_messages.extend(errors)
    if warnings:
        result_messages.extend([f"‚ö†Ô∏è {w}" for w in warnings])
    
    return len(errors) == 0, "\n".join(result_messages)


def validate_warehouse_structure(item: Dict[str, Any], item_index: int = 0) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É warehouses (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è).
    
    Args:
        item: –≠–ª–µ–º–µ–Ω—Ç –∏–∑ warehouse_remains
        item_index: –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        
    Returns:
        tuple[bool, str]: (True –µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö)
    """
    
    warehouses = item.get('warehouses', [])
    if not isinstance(warehouses, list):
        return False, f"–≠–ª–µ–º–µ–Ω—Ç {item_index}: warehouses –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
    
    errors = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ warehouse
    for i, warehouse in enumerate(warehouses):
        if not isinstance(warehouse, dict):
            errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {item_index}: warehouses[{i}] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if 'warehouseName' not in warehouse:
            errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {item_index}: warehouses[{i}] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'warehouseName'")
        
        if 'quantity' not in warehouse:
            errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {item_index}: warehouses[{i}] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'quantity'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–æ–ª–µ–π (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if 'warehouseName' in warehouse and not isinstance(warehouse['warehouseName'], str):
            errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {item_index}: warehouses[{i}].warehouseName –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            
        if 'quantity' in warehouse and not isinstance(warehouse['quantity'], (int, float)):
            errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {item_index}: warehouses[{i}].quantity –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_messages = []
    if errors:
        result_messages.extend(errors)
    if warnings:
        result_messages.extend([f"‚ö†Ô∏è {w}" for w in warnings])
    
    return len(errors) == 0, "\n".join(result_messages)


def handle_structure_change(changes_info: str = "") -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.
    
    Args:
        changes_info: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, False –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    """
    print("\n" + "=" * 80)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á—ë—Ç–∞ warehouse_remains")
    print("=" * 80)
    
    if changes_info:
        print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–ó–ú–ï–ù–ï–ù–ò–Ø–•:")
        print("-" * 60)
        print(changes_info)
        print("-" * 60)
    
    print("\nüìã –ß–¢–û –≠–¢–û –û–ó–ù–ê–ß–ê–ï–¢:")
    print("‚Ä¢ Wildberries –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç API")
    print("‚Ä¢ –î–æ–±–∞–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ø–æ–ª—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ")
    print("‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–∏—Å—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª—è—Ö")
    print("‚Ä¢ –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    
    print("\nü§î –ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï?")
    print("1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ - –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏)")
    print("2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥)")
    
    while True:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏–ª–∏ 2): ").strip()
        if choice == "1":
            print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å!")
            return True
        if choice == "2":
            print("üõë –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("üí° –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
            return False
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")


def check_and_validate_structure(data: List[Dict[str, Any]]) -> bool:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã warehouse_remains.
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –æ—Ç warehouse_remains API
        
    Returns:
        bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞ warehouse_remains...")
    
    if not isinstance(data, list):
        error_info = "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
        print(f"\n‚ùå {error_info}")
        return handle_structure_change(error_info)
    
    if not data:
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî –Ω–µ—á–µ–≥–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å")
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    critical_errors = []
    warnings = []
    
    for i, item in enumerate(data):
        if not isinstance(item, dict):
            critical_errors.append(f"–≠–ª–µ–º–µ–Ω—Ç {i}: –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º (dict), –ø–æ–ª—É—á–µ–Ω {type(item).__name__}")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        is_valid_basic, basic_info = validate_basic_structure(item, i)
        if not is_valid_basic:
            critical_errors.append(basic_info)
        elif basic_info:  # –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            warnings.append(basic_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É warehouses
        is_valid_warehouse, warehouse_info = validate_warehouse_structure(item, i)
        if not is_valid_warehouse:
            critical_errors.append(warehouse_info)
        elif warehouse_info:  # –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            warnings.append(warehouse_info)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    if critical_errors:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:")
        error_info = "\n".join(critical_errors)
        print(error_info)
        return handle_structure_change(error_info)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - –≤—ã–≤–æ–¥–∏–º –∏—Ö, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    if warnings:
        print("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):")
        for warning in warnings[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            print(f"  ‚Ä¢ {warning}")
        if len(warnings) > 10:
            print(f"  ... –∏ –µ—â—ë {len(warnings) - 10} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    return True