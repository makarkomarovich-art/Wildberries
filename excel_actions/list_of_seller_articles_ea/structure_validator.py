"""
–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –±–∞–∑—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑ Content API (cards list).

–û–∂–∏–¥–∞–µ–º: —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ (list[dict]) —Å –ø–æ–ª—è–º–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ:
- nmID: int (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- imtID: int (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- subjectName: string (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- vendorCode: string (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- title: string (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- sizes: list, –≥–¥–µ –≤ sizes[i] –µ—Å—Ç—å –ø–æ–ª—è:
  - techSize: string (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, WARNING –µ—Å–ª–∏ –Ω–µ—Ç)
  - skus: list (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, ERROR –µ—Å–ª–∏ –ø—É—Å—Ç–æ)
"""

from typing import Any, Dict, List


def validate_report_structure(rows: List[Dict[str, Any]]) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ Content API.
    
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: nmID, imtID, subjectName, vendorCode, title, sizes[].skus
    –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è: sizes[].techSize (WARNING –µ—Å–ª–∏ –Ω–µ—Ç)
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, False –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ä—Ç–æ—á–µ–∫ (Content API)")
    
    if not isinstance(rows, list):
        print("‚ùå –û–®–ò–ë–ö–ê: –î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        return False
    
    if not rows:
        print("‚ö†Ô∏è WARNING: –ü—É—Å—Ç–æ–π –æ—Ç—á—ë—Ç")
        return False

    first = rows[0]
    if not isinstance(first, dict):
        print("‚ùå –û–®–ò–ë–ö–ê: –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –æ–±—ä–µ–∫—Ç")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
    required_fields = {
        'nmID': int,
        'imtID': int,
        'subjectName': str,
        'vendorCode': str,
        'title': str,
        'sizes': list
    }
    
    for field, expected_type in required_fields.items():
        if field not in first:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –ø–æ–ª—è '{field}' –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ")
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {sorted(first.keys())}")
            return False
        
        if not isinstance(first[field], expected_type):
            print(f"‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {expected_type.__name__}, "
                  f"–ø–æ–ª—É—á–µ–Ω {type(first[field]).__name__}")
            return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º sizes[].techSize –∏ sizes[].skus
    sizes = first['sizes']
    if not sizes:
        print("‚ùå –û–®–ò–ë–ö–ê: –ú–∞—Å—Å–∏–≤ 'sizes' –ø—É—Å—Ç–æ–π")
        return False
    
    s0 = sizes[0]
    if not isinstance(s0, dict):
        print("‚ùå –û–®–ò–ë–ö–ê: sizes[0] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
        return False
    
    # techSize - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, WARNING –µ—Å–ª–∏ –Ω–µ—Ç
    if 'techSize' not in s0:
        print("‚ö†Ô∏è WARNING: –í sizes[0] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'techSize' (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)")
    elif not isinstance(s0['techSize'], str):
        print(f"‚ö†Ô∏è WARNING: –ü–æ–ª–µ 'techSize' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å string, –ø–æ–ª—É—á–µ–Ω {type(s0['techSize']).__name__}")
    
    # skus - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    if 'skus' not in s0:
        print("‚ùå –û–®–ò–ë–ö–ê: –í sizes[0] –Ω–µ—Ç –ø–æ–ª—è 'skus'")
        return False
    
    if not isinstance(s0['skus'], list):
        print("‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª–µ 'skus' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å list")
        return False
    
    skus = s0['skus']
    if not skus:
        print("‚ùå –û–®–ò–ë–ö–ê: –ú–∞—Å—Å–∏–≤ 'skus' –ø—É—Å—Ç–æ–π (–Ω–µ—Ç –±–∞—Ä–∫–æ–¥–æ–≤)")
        return False
    
    if not isinstance(skus[0], str):
        print(f"‚ùå –û–®–ò–ë–ö–ê: skus[0] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π (–±–∞—Ä–∫–æ–¥), –ø–æ–ª—É—á–µ–Ω {type(skus[0]).__name__}")
        return False

    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (nmID, imtID, subjectName, vendorCode, title, sizes[].techSize, sizes[].skus)")
    return True


def check_and_validate_structure(rows: List[Dict[str, Any]]) -> bool:
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç–∏–ª—è –≤—ã–∑–æ–≤–∞"""
    return validate_report_structure(rows)
