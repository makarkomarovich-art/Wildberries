"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö discounts_prices –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
"""

from typing import List, Dict, Any, Tuple
import logging

logger = logging.getLogger(__name__)


def process_discounts_data(listGoods: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ discounts_prices –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç.
    
    Args:
        listGoods: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API
        
    Returns:
        List[Dict]: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    """
    
    print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞...")
    
    processed_data = []
    
    for item in listGoods:
        try:
            processed_item = process_single_item(item)
            processed_data.append(processed_item)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item.get('nmID', 'unknown')}: {e}")
            continue
    
    # 1) –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ nmID (–º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ vendorCode)
    processed_data.sort(key=lambda x: x['nmID'])
    print(f"üìä –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(processed_data)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ nmID")
    
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_data)} —Ç–æ–≤–∞—Ä–æ–≤")
    return processed_data


def process_single_item(item: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä.
    
    Args:
        item: –¢–æ–≤–∞—Ä –∏–∑ API
        
    Returns:
        Dict: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    """
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    processed = {
        "nmID": item.get("nmID", 0),
        "vendorCode": item.get("vendorCode", ""),
        "brand": item.get("brand", ""),
        "subject": item.get("subject", ""),
        "title": item.get("title", ""),
    }
    
    # 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ prices
    prices = item.get("prices", [])
    processed["prices"] = process_price_list(prices, "prices", processed["nmID"])
    
    # 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ discountedPrices
    discounted_prices = item.get("discountedPrices", [])
    processed["discountedPrices"] = process_price_list(discounted_prices, "discountedPrices", processed["nmID"])
    
    # 4) discount
    processed["discount"] = item.get("discount", 0)
    
    # 5) discountOnSite (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    discount_on_site = item.get("discountOnSite")
    processed["discountOnSite"] = discount_on_site if discount_on_site is not None else 0
    
    # 6) –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –ø–æ—Å–ª–µ –°–ü–ü (priceafterSPP)
    # –ü—Ä–∏–º–µ–Ω—è–µ–º discountOnSite –∫ discountedPrices
    processed["priceafterSPP"] = calculate_price_after_spp(
        processed["discountedPrices"], 
        processed["discountOnSite"]
    )
    
    # 7) competitivePrice (–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ 99999)
    processed["competitivePrice"] = item.get("competitivePrice", 99999)
    
    # 8) isCompetitivePrice (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ nmID)
    processed["isCompetitivePrice"] = item.get("isCompetitivePrice", False)
    
    # 9) –û—Ü–µ–Ω–∫–∞ –±–ª–æ–∫–∞ promotions
    promotions = item.get("promotions", [])
    processed["hasPromotions"] = bool(promotions and len(promotions) > 0)
    
    return processed


def process_price_list(prices: List[Any], field_name: str, nmID: int) -> float:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω (prices –∏–ª–∏ discountedPrices).
    
    Args:
        prices: –°–ø–∏—Å–æ–∫ —Ü–µ–Ω
        field_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        nmID: ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        float: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
    """
    
    if not prices:
        return 0.0
    
    if len(prices) == 1:
        return float(prices[0])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ –≤—Å–µ —Ü–µ–Ω—ã
    unique_prices = set(prices)
    
    if len(unique_prices) == 1:
        # –í—Å–µ —Ü–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        return float(prices[0])
    else:
        # –¶–µ–Ω—ã —Ä–∞–∑–Ω—ã–µ - –ª–æ–≥–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é
        max_price = max(prices)
        min_price = min(prices)
        
        logger.warning(
            f"nmID {nmID}: –í –ø–æ–ª–µ '{field_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–∑–Ω—ã–µ —Ü–µ–Ω—ã "
            f"–¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤: min={min_price}, max={max_price}. "
            f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É: {max_price}"
        )
        
        return float(max_price)


def calculate_price_after_spp(discounted_price: float, discount_on_site: float) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –ø–æ—Å–ª–µ –°–ü–ü (—Å–∫–∏–¥–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ).
    
    Args:
        discounted_price: –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
        discount_on_site: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ (%)
        
    Returns:
        float: –¶–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –°–ü–ü
    """
    
    if not discount_on_site or discount_on_site <= 0:
        return discounted_price
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –Ω–∞ —Å–∞–π—Ç–µ –∫ —Ü–µ–Ω–µ —Å–æ —Å–∫–∏–¥–∫–æ–π
    price_after_spp = discounted_price * (1 - discount_on_site / 100)
    
    return round(price_after_spp, 2)


def get_report_summary(processed_data: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
    
    Args:
        processed_data: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
    Returns:
        Dict: –°–≤–æ–¥–∫–∞ –æ—Ç—á–µ—Ç–∞
    """
    
    total_items = len(processed_data)
    items_with_competitive_price = sum(1 for item in processed_data if item["competitivePrice"] != 99999)
    items_with_promotions = sum(1 for item in processed_data if item["hasPromotions"])
    items_with_spp = sum(1 for item in processed_data if item.get("discountOnSite", 0) > 0)
    
    return {
        "total_items": total_items,
        "items_with_competitive_price": items_with_competitive_price,
        "items_with_promotions": items_with_promotions,
        "items_with_spp": items_with_spp,
        "competitive_price_coverage": (items_with_competitive_price / total_items * 100) if total_items > 0 else 0,
        "promotions_coverage": (items_with_promotions / total_items * 100) if total_items > 0 else 0,
        "spp_coverage": (items_with_spp / total_items * 100) if total_items > 0 else 0
    }
