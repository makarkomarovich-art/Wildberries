"""
–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ WB API –¥–ª—è CR Daily Stats (nm-report/detail).
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π.

–û–∂–∏–¥–∞–µ–º:
- data.cards[] - –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
  - nmID: int (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  - statistics.selectedPeriod: –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  - statistics.previousPeriod: –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  - statistics.*.conversions: –æ–±—ä–µ–∫—Ç —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  - stocks.stocksMp, stocks.stocksWb: int (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
"""
from __future__ import annotations
import sys
from pathlib import Path
from typing import Any, Dict, List

# Add project root to path for imports
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))


def validate_cr_daily_stats_structure(response_data: dict) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è CR Daily Stats.
    
    Args:
        response_data: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API (—Å–ª–æ–≤–∞—Ä—å)
    
    Returns:
        True –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞, False –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    """
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CR Daily Stats...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if not isinstance(response_data, dict):
        print("‚ùå –û–®–ò–ë–ö–ê: –û—Ç–≤–µ—Ç API –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
        return False
    
    if "data" not in response_data:
        print("‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'data' –≤ –æ—Ç–≤–µ—Ç–µ")
        return False
    
    data = response_data["data"]
    if not isinstance(data, dict):
        print("‚ùå –û–®–ò–ë–ö–ê: 'data' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
        return False
    
    if "cards" not in data:
        print("‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'cards' –≤ data")
        return False
    
    cards = data["cards"]
    if not isinstance(cards, list):
        print("‚ùå –û–®–ò–ë–ö–ê: 'cards' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º")
        return False
    
    if not cards:
        print("‚ö†Ô∏è  WARNING: –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ (cards –ø—É—Å—Ç–æ–π)")
        return True
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–∞–∫ —ç—Ç–∞–ª–æ–Ω)
    first_card = cards[0]
    if not _validate_card_structure(first_card, 0):
        return False
    
    print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞. –ö–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
    return True


def _validate_card_structure(card: dict, idx: int) -> bool:
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.
    
    Args:
        card: –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        idx: –ò–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–∞—Å—Å–∏–≤–µ
    
    Returns:
        True –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞, False –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    """
    if not isinstance(card, dict):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ nmID
    if "nmID" not in card:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}]: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'nmID'")
        return False
    
    if not isinstance(card["nmID"], int):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}]: nmID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å integer, –ø–æ–ª—É—á–µ–Ω {type(card['nmID']).__name__}")
        return False
    
    nm_id = card["nmID"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ vendorCode
    if "vendorCode" not in card:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'vendorCode'")
        return False
    
    if not isinstance(card["vendorCode"], str):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): vendorCode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å string, –ø–æ–ª—É—á–µ–Ω {type(card['vendorCode']).__name__}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ statistics
    if "statistics" not in card:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'statistics'")
        return False
    
    stats = card["statistics"]
    if not isinstance(stats, dict):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): statistics –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ selectedPeriod
    if "selectedPeriod" not in stats:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç statistics.selectedPeriod")
        return False
    
    if not _validate_period(stats["selectedPeriod"], "selectedPeriod", nm_id, idx):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ previousPeriod
    if "previousPeriod" not in stats:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç statistics.previousPeriod")
        return False
    
    if not _validate_period(stats["previousPeriod"], "previousPeriod", nm_id, idx):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ stocks
    if "stocks" not in card:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'stocks'")
        return False
    
    stocks = card["stocks"]
    if not isinstance(stocks, dict):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): stocks –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
        return False
    
    if "stocksMp" not in stocks:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç stocks.stocksMp")
        return False
    
    if "stocksWb" not in stocks:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç stocks.stocksWb")
        return False
    
    return True


def _validate_period(period: dict, period_name: str, nm_id: int, idx: int) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞ (selectedPeriod –∏–ª–∏ previousPeriod).
    
    Args:
        period: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞
        period_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö)
        nm_id: nmID –∫–∞—Ä—Ç–æ—á–∫–∏
        idx: –ò–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏
    
    Returns:
        True –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞, False –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    """
    if not isinstance(period, dict):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): {period_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
        return False
    
    required_fields = [
        "openCardCount",
        "addToCartCount",
        "ordersCount",
        "ordersSumRub",
        "cancelCount",
    ]
    
    for field in required_fields:
        if field not in period:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): {period_name}.{field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ conversions
    if "conversions" not in period:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): {period_name}.conversions –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False
    
    conversions = period["conversions"]
    if not isinstance(conversions, dict):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): {period_name}.conversions –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
        return False
    
    conv_fields = ["addToCartPercent", "cartToOrderPercent"]
    for field in conv_fields:
        if field not in conversions:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ä—Ç–æ—á–∫–∞ [{idx}] (nmID={nm_id}): {period_name}.conversions.{field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
    
    return True


if __name__ == "__main__":
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º JSON"""
    import json
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
    test_file = PROJECT_ROOT / "test_new_methods" / "CR_big_2025-09-27_to_2025-10-04.json"
    
    if not test_file.exists():
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        sys.exit(1)
    
    print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {test_file}")
    with open(test_file, "r", encoding="utf-8") as f:
        test_data = json.load(f)
    
    try:
        validate_cr_daily_stats_structure(test_data)
        print("\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    except ValueError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n{e}")
        sys.exit(1)

