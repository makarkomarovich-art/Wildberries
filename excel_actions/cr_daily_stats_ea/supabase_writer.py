"""
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö CR Daily Stats –≤ Supabase.

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π product_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products
- Upsert –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É cr_daily_stats
"""

from __future__ import annotations
from typing import List
from supabase import Client


def enrich_with_product_ids(
    records: list[dict],
    supabase: Client
) -> list[dict]:
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ product_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products.
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω product_id.
    
    Args:
        records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
        supabase: –ö–ª–∏–µ–Ω—Ç Supabase
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º product_id (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π)
    """
    if not records:
        return []
    
    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ product_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ products –∏–∑ –ë–î
    response = supabase.table('products').select('nm_id, id').execute()
    products_map = {p['nm_id']: p['id'] for p in response.data}
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ products: {len(products_map)}")
    
    # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    enriched_records = []
    skipped_count = 0
    
    for record in records:
        nm_id = record['nm_id']
        product_id = products_map.get(nm_id)
        
        if not product_id:
            print(f"‚ö†Ô∏è  WARNING: nm_id={nm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ products, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            skipped_count += 1
            continue
        
        record['product_id'] = product_id
        enriched_records.append(record)
    
    print(f"‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(enriched_records)}")
    if skipped_count > 0:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π (–Ω–µ—Ç –≤ products): {skipped_count}")
    
    return enriched_records


def upsert_records(
    records: list[dict],
    supabase: Client,
    label: str = ""
) -> int:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç upsert –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É cr_daily_stats.
    
    Args:
        records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è upsert
        supabase: –ö–ª–∏–µ–Ω—Ç Supabase
        label: –ú–µ—Ç–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å–µ–≥–æ–¥–Ω—è" –∏–ª–∏ "–≤—á–µ—Ä–∞")
    
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    """
    if not records:
        print(f"‚ö†Ô∏è  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è upsert ({label})")
        return 0
    
    print(f"üîÑ Upsert –≤ Supabase ({label})...")
    
    try:
        response = supabase.table('cr_daily_stats').upsert(
            records,
            on_conflict='nm_id,date_of_period'
        ).execute()
        
        count = len(response.data) if response.data else len(records)
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π ({label}): {count}")
        return count
    
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ upsert ({label}): {e}")
        raise

