"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Google Colab –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Cursor
"""

import requests
import time
import sys
import os
from pathlib import Path
from typing import Dict, Any, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ api-keys (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å)
BASE_DIR = Path(__file__).resolve().parents[1]
api_keys_path = BASE_DIR / 'api_keys.py'
import importlib.util
spec = importlib.util.spec_from_file_location("api_keys", str(api_keys_path))
api_keys_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(api_keys_module)
API_KEY = api_keys_module.WB_API_TOKEN


class WildberriesWarehouseAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://seller-analytics-api.wildberries.ru/api/v1/warehouse_remains"
        self.headers = {"Authorization": api_key}
        self.locale = "ru"
    
    def create_report(self) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤
        
        Returns:
            str: Task ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        print("üîÑ –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞
        params = {
            "locale": self.locale,
            "groupByBrand": False,
            "groupBySubject": False,
            "groupBySa": True,       # –≤–∫–ª—é—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞ (vendorCode)
            "groupByNm": True,       # —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º WB
            "groupByBarcode": True,  # –≤–∫–ª—é—á–∞–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
            "groupBySize": False,
            "filterPics": 0,
            "filterVolume": 0
        }
        
        try:
            response = requests.get(self.base_url, headers=self.headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                task_id = data.get("data", {}).get("taskId")
                
                if task_id:
                    print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω! Task ID: {task_id}")
                    print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ —ç—Ç–æ–º—É Task ID.")
                    return task_id
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Task ID.")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    def check_report_status(self, task_id: str) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            str: –°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
        """
        status_url = f"{self.base_url}/tasks/{task_id}/status"
        
        try:
            response = requests.get(status_url, headers=self.headers)
            
            if response.status_code != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code} - {response.text}")
            
            status_data = response.json().get("data", {})
            status = status_data.get("status")
            
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞: {status}")
            return status
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return "error"
    
    def wait_for_report(self, task_id: str, max_wait_time: int = 300) -> bool:
        """
        –û–∂–∏–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            max_wait_time: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤, False –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        """
        print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ (–º–∞–∫—Å–∏–º—É–º {max_wait_time} —Å–µ–∫)...")
        
        start_time = time.time()
        
        while time.time() - start_time < max_wait_time:
            status = self.check_report_status(task_id)
            
            if status == "done":
                print("‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!")
                return True
            elif status == "error":
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
                return False
            else:
                print(f"‚ö†Ô∏è –û—Ç—á—ë—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: '{status}'")
                print("‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)
        
        print(f"‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ ({max_wait_time} —Å–µ–∫)")
        return False
    
    def download_report(self, task_id: str) -> Optional[Dict[str, Any]]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        print("üì• –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç...")
        
        download_url = f"{self.base_url}/tasks/{task_id}/download"
        
        try:
            response = requests.get(download_url, headers=self.headers)
            
            if response.status_code == 200:
                report_data = response.json()
                print("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
                return report_data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    def get_warehouse_remains(self, wait_for_completion: bool = True) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞, –æ–∂–∏–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        
        Args:
            wait_for_completion: –ñ–¥–∞—Ç—å –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
            
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # 1. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        task_id = self.create_report()
        if not task_id:
            return None
        
        if not wait_for_completion:
            print("‚ö†Ô∏è –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            return None
        
        # 2. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if not self.wait_for_report(task_id):
            return None
        
        # 3. –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç
        return self.download_report(task_id)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –æ—Å—Ç–∞—Ç–∫–æ–≤ Wildberries")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
    api = WildberriesWarehouseAPI(API_KEY)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
    report_data = api.get_warehouse_remains()
    
    if report_data:
        print("\nüìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print("=" * 30)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if isinstance(report_data, dict):
            print(f"–ö–ª—é—á–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: {list(report_data.keys())}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
            if 'data' in report_data:
                data = report_data['data']
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(data) if isinstance(data, list) else 'N/A'}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
                if isinstance(data, list) and len(data) > 0:
                    print("\n–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:")
                    for key, value in data[0].items():
                        print(f"  {key}: {value}")
        else:
            print(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(report_data)}")
            print(f"–î–∞–Ω–Ω—ã–µ: {report_data}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")


if __name__ == "__main__":
    main()
